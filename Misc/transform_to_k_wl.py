from copy import deepcopy
from itertools import combinations

from torch import transpose, stack, mode, tensor, cat, zeros
from torch_geometric.data import Data
from torch_geometric.transforms import BaseTransform


class TransforToKWl(BaseTransform):
    def __init__(self, k: int = True):
        if not 2 <= k <= 3:
            raise NotImplementedError('k-WL: k can be only 2 or 3 at the moment')
        self.k = k
        self.matrices = {}
        for k in range(30):
            self.matrices[k] = (self.create_empty_matrix(k))

    def create_empty_matrix(self, n):
        if n == 0:
            return [], [[]]
        all_combinations = list(combinations(list(range(n)), self.k))
        new_adj = [[None for j in range(len(all_combinations))] for i in range(len(all_combinations))]
        for i, c1 in enumerate(all_combinations):
            for j, c2 in enumerate(all_combinations):
                # the adjacency is simple. If the new vertices share old vertices except one.
                # The number is the position where they differ
                new_adj[i][j] = self.has_common(c1, c2)
        return all_combinations, new_adj

    def has_common(self, c1, c2):
        diff_num = 0
        for i in range(len(c1)):
            if c1[i] != c2[i]:
                diff_num += 1
        if diff_num != 1:
            return None

        for i in range(len(c1)):
            if c1[i] != c2[i]:
                return i + 1

    def create_adjacency_from_graph(self, graph, size):
        adj = [[None for j in range(size)] for i in range(size)]
        attrs = graph['edge_attr'].tolist()
        for i, x in enumerate(transpose(graph['edge_index'], 0, 1)):
            adj[x[0]][x[1]] = attrs[i]
        return adj

    def graph_to_k_wl_graph(self, graph):
        vert_num = graph['num_nodes']
        num_edges = graph.edge_attr.shape[0]
        if num_edges < 2:
            return graph
        len_edge_attr = graph.edge_attr.shape[1]
        if vert_num not in self.matrices:
            self.matrices[vert_num] = self.create_empty_matrix(vert_num)
        all_combinations, new_adj = deepcopy(self.matrices[vert_num])
        old_adj = self.create_adjacency_from_graph(graph, vert_num)
        new_x = [0] * len(new_adj)
        for i, c1 in enumerate(all_combinations):
            for j, c2 in enumerate(all_combinations):
                # edge attributes are hard. This will include median of all the edges that
                # were between any of the vertexes from the two subgraphs. It can be remade to just include the stack.
                # The first attribute is the number generated by the k_WL algorithm form the function has_common
                if new_adj[i][j] is not None:
                    selected_attrs = [tensor(old_adj[x[0]][x[1]]).add(1) for x in
                                      combinations(set(c1 + c2), 2) if
                                      old_adj[x[0]][x[1]] is not None]

                    # in case there was no edge between any of the graph vertices
                    if len(selected_attrs) == 0:
                        new_adj[i][j] = cat((tensor([new_adj[i][j]]),
                                             zeros((len_edge_attr))))
                    else:
                        new_adj[i][j] = cat((tensor([new_adj[i][j]]),
                                             mode(stack(selected_attrs),
                                                  dim=0).values))

        for i, c in enumerate(all_combinations):
            # works only for K==2 and K==3
            # sum of number of edges in the subgraph
            # for K larger than 3, I would suggest using hash from WL algorithm on each small subgraph
            # Using bool to detect where edge has value and where None is.
            k_x = [sum([bool(old_adj[c[j - 1]][c[j]]) for j in range(len(c))])]
            # adding all vertex features from the vertex in the subgraph using mode to keep the dimensionality.
            new_x[i] = cat((tensor(k_x), mode(stack([graph.x[j] for j in c]), dim=0).values), 0)

        graph.x = stack(new_x)
        graph.num_nodes = len(all_combinations)
        new_edge = [[], []]
        new_edge_attr = []
        # transform to Torch graph data
        for i, x in enumerate(new_adj):
            for j, e in enumerate(x):
                if e is not None:
                    new_edge[0].append(i)
                    new_edge[1].append(j)
                    new_edge_attr.append(e)
        graph.edge_attr = stack(new_edge_attr)
        graph.edge_index = tensor(new_edge)
        return graph

    def __call__(self, data: Data) -> Data:
        return self.graph_to_k_wl_graph(data)

    def __repr__(self) -> str:
        return (f'{self.__class__.__name__}(k={self.k})')
